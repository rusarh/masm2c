#!/usr/bin/python

# ScummVM - Graphic Adventure Engine
#
# ScummVM is the legal property of its developers, whose names
# are too numerous to list here. Please refer to the COPYRIGHT
# file distributed with this source distribution.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#

from tasm.parser import parser
from tasm.cpp import cpp
import sys, re

def tracefunc(frame, event, arg, indent=[0]):
      if event == "call":
          indent[0] += 2
          print "-" * indent[0] + "> call function", frame.f_code.co_filename, frame.f_code.co_name
      elif event == "return":
          print "<" + "-" * indent[0], "exit function", frame.f_code.co_name
          indent[0] -= 2
      return tracefunc

import sys
#sys.settrace(tracefunc)

p = parser(skip_binary_data = [
	# These data blobs are not output
	# dreamweb.asm
#	'characterset1',
	])
p.strip_path = 3
name = sys.argv[1]
context = p.parse(name)
#context = p.parse('addsub.asm')
p.link()


m = re.match(r'.*?([A-Za-z90-9_\.-]+)\.asm', name.lower())
if m is not None:
	name = m.group(1).strip()

generator = cpp(context, name, blacklist = [
	# These functions are not processed

#	'aboutturn',
	], skip_output = [
	# These functions are processed but not output
	], skip_dispatch_call = True, skip_addr_constants = True,
	header_omit_blacklisted = True,
	function_name_remapping = {
	# This remaps the function naming at output for readability
#	'_moduleread' : '_moduleread',
	})
generator.generate('mainproc') #start routine
