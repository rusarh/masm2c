_DATA:0000
_DATA:0000                 .686p
_DATA:0000                 .mmx
_DATA:0000                 .model flat
_DATA:0000
_DATA:0000 ; ===========================================================================
_DATA:0000
_DATA:0000 ; Segment type: Pure data
_DATA:0000 _DATA           segment word public 'DATA' use16
_DATA:0000                 assume cs:_DATA
_DATA:0000 unk_10000       db  48h ; H             ; DATA XREF: _TEXT:0006↓o
_DATA:0001                 db  65h ; e
_DATA:0002                 db  6Ch ; l
_DATA:0003                 db  6Ch ; l
_DATA:0004                 db  6Fh ; o
_DATA:0005                 db  20h
_DATA:0006                 db  57h ; W
_DATA:0007                 db  6Fh ; o
_DATA:0008                 db  72h ; r
_DATA:0009                 db  6Ch ; l
_DATA:000A                 db  64h ; d
_DATA:000B                 db  21h ; !
_DATA:000C                 db  0Dh
_DATA:000D                 db  0Ah
_DATA:000E                 db  24h ; $
_DATA:000F                 align 2
_DATA:000F _DATA           ends
_DATA:000F
_TEXT:0000 ; ===========================================================================
_TEXT:0000
_TEXT:0000 ; Segment type: Pure code
_TEXT:0000 _TEXT           segment word public 'CODE' use16
_TEXT:0000                 assume cs:_TEXT
_TEXT:0000                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
_TEXT:0000
_TEXT:0000                 public start
_TEXT:0000 start:
_TEXT:0000                 push    seg _DATA
_TEXT:0003                 pop     ds
_TEXT:0004                 assume ds:_DATA
_TEXT:0004                 mov     ah, 9
_TEXT:0006                 mov     dx, offset unk_10000
_TEXT:0009                 int     21h             ; DOS - PRINT STRING
_TEXT:0009                                         ; DS:DX -> string terminated by "$"
_TEXT:000B                 mov     ebx, 0FFFFFFFFh
_TEXT:0011                 mov     bl, 0
_TEXT:0013                 cmp     ebx, 0FFFFFF00h
_TEXT:001A                 jnz     short loc_10034
_TEXT:001C                 nop
_TEXT:001D                 nop
_TEXT:001E                 xor     eax, eax
_TEXT:0021                 jmp     short loc_10036
_TEXT:0021 ; ---------------------------------------------------------------------------
_TEXT:0023                 align 2
_TEXT:0024
_TEXT:0024 loc_10034:                              ; CODE XREF: _TEXT:001A↑j
_TEXT:0024                 mov     al, 1
_TEXT:0026
_TEXT:0026 loc_10036:                              ; CODE XREF: _TEXT:0021↑j
_TEXT:0026                 mov     ah, 4Ch ; 'L'
_TEXT:0028                 int     21h             ; DOS - 2+ - QUIT WITH EXIT CODE (EXIT)
_TEXT:0028                                         ; AL = exit code
_TEXT:0028 ; ---------------------------------------------------------------------------
_TEXT:002A                 align 8
_TEXT:002A _TEXT           ends
_TEXT:002A
STACKSEG:00000000 ; ===========================================================================
STACKSEG:00000000
STACKSEG:00000000 ; Segment type: Uninitialized
STACKSEG:00000000 STACKSEG        segment para stack 'STACK' use32
STACKSEG:00000000                 assume cs:STACKSEG
STACKSEG:00000000                 assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
STACKSEG:00000000                 db 1000h dup(?)
STACKSEG:00000000 STACKSEG        ends
STACKSEG:00000000
STACKSEG:00000000
STACKSEG:00000000                 end start
