?start: _directivelist?  enddir
//%ignore " "

U_DOT: "."
_COMMA: ","
charlist: /[^\r\n\t ]+/x
text: /[^\r\n]+/x
STRING: /((?<!')'(?!').+?(?<!')'(?!'))|((?<!")"(?!").+?(?<!")"(?!"))/
LABEL: /[A-Za-z@_$?][A-Za-z@_$?0-9]*/
//MONKEY: /@@|@B|@F/

COMMENTKW: "COMMENT"i /\s+(?P<delim>\S).+?(?P=delim)[^\r\n]*/isx
_ENDOFLINE: /[\r\n]+[\t \r\n]*/x
INTEGER: /[+-]?[0-9][0-9A-Fa-f]*[HOQTYhoqty]?\b/
SIGNED_FLOAT: /[+-]?[0-9]+\.[0-9]*([eE][-+]?[0-9]+)?\b/
//_signed_integer: SIGN INTEGER
_integer_: INTEGER //| _signed_integer

WS: /[\t \b\v\f\x1a]+/x
//WS: /([\t \b\v\f\x1a]+)|(\\;?[^\r\n]*[\r\n\t \b\v\f\x1a]+)/x
%ignore WS

!comment: /;[^\r\n]*/x
KEYWORD: /\w+/
arbitrarytext: /[^\r\n]+/x
!mnemonic: "AAA"i|"AAD"i|"AAM"i|"AAS"i|"ADC"i|"ADD"i|"AND"i|"CALL"i|"CBW"i|"CLC"i|"CLD"i|"CLI"i|"CMC"i|"CMP"i|"CMPS"i|"CMPSB"i|"CMPSW"i|"CMPXCHG8B"i|"CWD"i|"DAA"i|"DAS"i|"DEC"i|"DIV"i|"ESC"i|"HLT"i|"IDIV"i|"IMUL"i|"IN"i|"INC"i|"INT"i|"INTO"i|"IRET"i|"JA"i|"JAE"i|"JB"i|"JBE"i|"JC"i|"JCXZ"i|"JE"i|"JG"i|"JGE"i|"JL"i|"JLE"i|"JMP"i|"JNA"i|"JNAE"i|"JNB"i|"JNBE"i|"JNC"i|"JNE"i|"JNG"i|"JNGE"i|"JNL"i|"JNLE"i|"JNO"i|"JNP"i|"JNS"i|"JNZ"i|"JO"i|"JP"i|"JPE"i|"JPO"i|"JS"i|"JZ"i|"LAHF"i|"LDS"i|"LEA"i|"LES"i|"LODS"i|"LODSB"i|"LODSW"i|"LOOP"i|"LOOPE"i|"LOOPEW"i|"LOOPNE"i|"LOOPNEW"i|"LOOPNZ"i|"LOOPNZW"i|"LOOPW"i|"LOOPZ"i|"LOOPZW"i|"MOV"i|"MOVS"i|"MOVSB"i|"MOVSW"i|"MUL"i|"NEG"i|"NOP"i|"NOT"i|"OR"i|"OUT"i|"POP"i|"POPF"i|"PUSH"i|"PUSHF"i|"RCL"i|"RCR"i|"RET"i|"RETF"i|"RETN"i|"ROL"i|"ROR"i|"SAHF"i|"SAL"i|"SAR"i|"SBB"i|"SCAS"i|"SCASB"i|"SCASW"i|"SHL"i|"SHR"i|"STC"i|"STD"i|"STI"i|"STOS"i|"STOSB"i|"STOSW"i|"SUB"i|"TEST"i|"WAIT"i|"XCHG"i|"XLAT"i|"XLATB"i|"XOR"i|"BOUND"i|"ENTER"i|"INS"i|"INSB"i|"INSW"i|"LEAVE"i|"OUTS"i|"OUTSB"i|"OUTSW"i|"POPA"i|"PUSHA"i|"PUSHW"i|"BSF"i|"BSR"i|"BT"i|"BTC"i|"BTR"i|"BTS"i|"CDQ"i|"CMPSD"i|"CWDE"i|"INSD"i|"IRETD"i|"IRETDF"i|"IRETF"i|"JECXZ"i|"LFS"i|"LGS"i|"LODSD"i|"LOOPD"i|"LOOPED"i|"LOOPNED"i|"LOOPNZD"i|"LOOPZD"i|"LSS"i|"MOVSD"i|"MOVSX"i|"MOVZX"i|"OUTSD"i|"POPAD"i|"POPFD"i|"PUSHAD"i|"PUSHD"i|"PUSHFD"i|"SCASD"i|"SETA"i|"SETAE"i|"SETB"i|"SETBE"i|"SETC"i|"SETE"i|"SETG"i|"SETGE"i|"SETL"i|"SETLE"i|"SETNA"i|"SETNAE"i|"SETNB"i|"SETNBE"i|"SETNC"i|"SETNE"i|"SETNG"i|"SETNGE"i|"SETNL"i|"SETNLE"i|"SETNO"i|"SETNP"i|"SETNS"i|"SETNZ"i|"SETO"i|"SETP"i|"SETPE"i|"SETPO"i|"SETS"i|"SETZ"i|"SHLD"i|"SHRD"i|"STOSD"i|"BSWAP"i|"CMPXCHG"i|"XADD"i
//| F2XM1| FABS| FADD| FADDP| FBLD| FBSTP| FCHS| FCLEX| FCOM| FCOMP| FCOMPP| FDECSTP| FDISI| FDIV| FDIVP| FDIVR| FDIVRP
//| FENI| FFREE| FIADD| FICOM| FICOMP| FIDIV| FIDIVR| FILD| FIMUL| FINCSTP| FINIT| FIST| FISTP| FISUB| FISUBR| FLD| FLD1
//| FLDCW| FLDENV| FLDENVW| FLDL2E| FLDL2T| FLDLG2| FLDLN2| FLDPI| FLDZ| FMUL| FMULP| FNCLEX| FNDISI| FNENI| FNINIT
//| FNOP| FNSAVE| FNSAVEW| FNSTCW| FNSTENV| FNSTENVW| FNSTSW| FPATAN| FPREM| FPTAN| FRNDINT| FRSTOR| FRSTORW| FSAVE
//| FSAVEW| FSCALE| FSQRT| FST| FSTCW| FSTENV| FSTENVW| FSTP| FSTSW| FSUB| FSUBP| FSUBR| FSUBRP| FTST| FWAIT| FXAM| FXCH
//| FXTRACT| FYL2X| FYL2XP1| FSETPM| FCOS| FLDENVD| FNSAVED| FNSTENVD| FPREM1| FRSTORD| FSAVED| FSIN| FSINCOS| FSTENVD| FUCOM
//| FUCOMP| FUCOMPP
//
//datadecl: /(?i)(DB) | (DW) | (DD) | (DF) | (DQ) | (DT) | (BYTE)|(SBYTE)|(WORD)|(SWORD)|(DWORD)|(SDWORD)|(FWORD)|(QWORD)|(TBYTE)|(REAL4)|(REAL8)|(REAL10)/
!datadecl: "DB"i | "DW"i | "DD"i | "DF"i | "DQ"i | "DT"i | "BYTE"i | "SBYTE"i|"WORD"i|"SWORD"i|"DWORD"i|"SDWORD"i|"FWORD"i|"QWORD"i|"TBYTE"i|"REAL4"i|"REAL8"i|"REAL10"i
//DATATYPE: "BYTE"i|"SBYTE"i|"WORD"i|"SWORD"i|"DWORD"i|"SDWORD"i|"FWORD"i|"QWORD"i|"TBYTE"i|"REAL4"i|"REAL8"i|"REAL10"i
!register: "AX"i|"EAX"i|"BX"i|"EBX"i|"CX"i|"ECX"i|"DX"i|"EDX"i|"BP"i|"EBP"i|"SP"i|"ESP"i|"DI"i|"EDI"i|"SI"i|"ESI"i|"AL"i|"AH"i|"BL"i|"BH"i|"CL"i|"CH"i|"DL"i|"DH"i
!segmentregister: "CS"i|"DS"i|"ES"i|"FS"i|"GS"i|"SS"i
!specialregister: "CR0"i|"CR2"i|"CR3"i|"DR0"i|"DR1"i|"DR2"i|"DR3"i|"DR6"i|"DR7"i|"TR3"i|"TR4"i|"TR5"i|"TR6"i|"TR7"i
!instrprefix: "REP"i|"REPE"i|"REPZ"i|"REPNE"i|"REPNZ"i|"LOCK"i
!langtype: "C"i|"PASCAL"i|"FORTRAN"i|"BASIC"i|"SYSCALL"i|"STDCALL"i
!maptype: "ALL"i|"NONE"i|"NOTPUBLIC"i
!memoption: "TINY"i|"SMALL"i|"MEDIUM"i|"COMPACT"i|"LARGE"i|"HUGE"i|"FLAT"i
!listoption: ".LIST"i|".NOLIST"i|".XLIST"i|".LISTALL"i|".LISTIF"i|".LFCOND"i|".NOLISTIF"i|".SFCOND"i|".TFCOND"i|".LISTMACROALL"i|".LALL"i|".NOLISTMACRO"i|".SALL"i|".LISTMACRO"i|".XALL"i
!processor: ".8086"i|".186"i|".286"i|".286C"i|".286P"i|".386"i|".386C"i|".386P"i|".486"i|".486P"i|".586"i|".586P"i|".686"i|".686P"i|".K3D"i|".MMX"i|".XMM"i
!coprocessor: ".8087"i|".287"i|".387"i|".NO87"i
!segalign: "BYTE"i|"WORD"i|"DWORD"i|"PARA"i|"PAGE"i
!segorderdir: ".ALPHA"i|".SEQ"i|".DOSSEG"i|"DOSSEG"i
!assumenothing: "ASSUME NOTHING"i

!aliasdir: "ALIAS"i
!binaryop: "=="| "!="| ">="| "<="| ">"| "<"| "&"

altidq: "(" LABEL ")"
assdir: LABEL "=" expr _linereminder
assumedir: "ASSUME"i assumelist _linereminder| assumenothing _linereminder
assumelist : assumeregister| assumeregister _COMMA assumelist
assumereg: register ":" assumeval
assumeregister: assumesegreg| assumereg
assumesegreg: segmentregister ":" assumesegval
assumesegval: "NOTHING"i | "ERROR"i | frameexpr
assumeval: "NOTHING"i | "ERROR"i | qualifiedtype
//bcdconst: unadd?  decnumber
//bitdef: bitfieldid ":" expr eqconstexpr?
bitdef: bitfieldid ":" expr
bitdeflist: bitdef | bitdef commaoeol bitdeflist
bitfieldid : LABEL
blockstatements: ".CONTINUE"i ifcexpr? _linereminder | ".BREAK"i ifcexpr? _linereminder| insegdir+
bool: "TRUE"i | "FALSE"i
brmacroarglist: "<" macroarglist ">"
classname: STRING
commaidvararg: commaoeol   LABEL? "VARARG"i
commainvokelist: commaoeol invokelist
commamodeloptlist: _COMMA modeloptlist
commanonuniq: _COMMA "NONUNIQUE"i
commapagewidth: _COMMA expr
commaparmidvararg: commaoeol  LABEL "VARARG"i
commaparmlist: commaoeol? parmlist
commaprotolist: commaoeol  protolist
commatextlen: _COMMA expr
commdecl: NEARFAR?   langtype?  LABEL ":" commtype eqconstexpr?
commdir: "COMM"i commlist _linereminder
//commentdir: COMMENTKW DELIMITER text text DELIMITER text _linereminder; TODO
commentdir: COMMENTKW _linereminder
commlist: commdecl | commdecl _COMMA commlist
commtype: expr
//constant: digits  radixoverride?
contextdir: "PUSHCONTEXT"i contextitemlist _linereminder| "POPCONTEXT"i contextitemlist _linereminder
contextitem: "ASSUMES"i | "RADIX"i | "LISTING"i | "CPU"i | "ALL"i
contextitemlist: contextitem | contextitem _COMMA contextitemlist
controlblock: whileblock| repeatblock
controldir: controlif| controlblock
controlelseif: ".ELSEIF"i cexpr _linereminder insegdir+ controlelseif?
controlif: ".IF"i cexpr _linereminder insegdir+ controlelseif? elsedirectivelist? ".ENDIF"i _linereminder
crefdir: crefoption _linereminder
crefoption: ".CREF"i | ".XCREF"i idlist? | ".NOCREF"i idlist?
//datadecl: DB | DW | DD | DF | DQ | DT | DATATYPE
//datadir: LABEL? dataitem _linereminder
!datadir: LABEL? datadecl exprlist _linereminder | structinstdir | recordinstdir
//datadir: LABEL? datadecl exprlist _linereminder | LABEL? LABEL structinstlist _linereminder
%declare STRUCTNAME
%declare RECORDNAME
%declare MACRONAME
structinstdir: LABEL? STRUCTNAME structinstlist _linereminder
recordinstdir: LABEL? RECORDNAME recordinstlist _linereminder
//dataitem: datadecl exprlist| LABEL structinstlist| LABEL recordinstlist
decnumber: _integer_
digits: decnumber
_directive: _generaldir| _segmentdef | _linereminder
_directivelist: _directive+
!distance: "NEAR"i | "FAR"i | "NEAR16"i | "NEAR32"i | "FAR16"i | "FAR32"i
dotdotforparmtype: ":" forparmtype
dotdotparmtype: ":" parmtype
dotdotqualifiedtype: ":" qualifiedtype

cexpr: aexpr "||" cexpr | aexpr
aexpr: term "&&" aexpr | term
term: "!" simpleexpr | simpleexpr
simpleexpr: "(" cexpr ")"| primary
primary: expr binaryop expr| flagname| expr
cxzexpr: "!" expr| expr  "==" expr| expr  "!=" expr | expr

!braces: "(" expr ")"

field: "." e11
fieldlist: field+

// Precedence Operators
// 1 ( ), [ ]
// 2 LENGTH , SIZE , WIDTH , MASK, LENGTHOF, SIZEOF
// 3 . (structure-field-name operator)
// 4 : (segment-override operator), PTR
// 5 LROFFSET , OFFSET , SEG , THIS , TYPE
// 6 HIGH , HIGHWORD , LOW , LOWWORD
// 7 +, - (unary)
// 8 *, /, MOD , SHL , SHR
// 9 +, - (binary)
// 10 EQ , NE , LT , LE , GT , GE
// 11 NOT
// 12 AND
// 13 OR , XOR
// 14 OPATTR , SHORT , .TYPE
SIGN: ("+"|"-")
MULOP: ("*"| "/" | "MOD"i)
RELOP: ("EQ"i|"NE"i|"LT"i|"LE"i|"GT"i|"GE"i)
OROP: ("OR"i|"XOR"i)
SHOP: ("SHR"i | "SHL"i)
WORDOP: ("HIGH"i|"LOW"i|"HIGHWORD"i|"LOWWORD"i)
!ptrdir2: ("LARGE"i|"SMALL"i|"SHORT"i) segmentregister ":" e10

?e01: e02 | e01 OROP e02 -> ordir
?e02: e03 | e02 "AND"i e03 -> anddir
?e03: e04 | "NOT"i e04 -> notdir
?e04: e05 | e04 RELOP e05 -> reldir
?e05: e06 | e05 SIGN e06 -> adddir
?e06: e07 | e06 MULOP e07 -> muldir
| e06 SHOP e07 -> shiftdir
?e07: SIGN e07 -> unadddir
| e08
?e08: WORDOP e09
| e09
?e09: "OFFSET"i e10 -> offsetdir
| "SEG"i e10 -> seg
| "LROFFSET"i e10
| "TYPE"i e10
| "THIS"i e10
| e09 "PTR"i e10 -> ptrdir
| ptrdir2
| e09 ":" e10 -> segoverride
| e10
?e10: e10 fieldlist -> memberdir
| e10 "[" expr "]" -> sqexpr2
| e11
dir3: "WIDTH"i LABEL
| "MASK"i LABEL
| "SIZE"i sizearg
| "SIZEOF"i sizearg
| "LENGTH"i LABEL
| "LENGTHOF"i LABEL
?e11: braces
| "[" expr "]" -> sqexpr
| dir3
| recordconst
| STRING
| _integer_
| type
| "$"
| _anyregister
| "ST"i
| "ST"i "(" expr ")"
expr: ".TYPE"i e01
| "OPATTR"i e01
| e01
sizearg: e10

echodir: "ECHO"i arbitrarytext _linereminder | ".OUT"i arbitrarytext _linereminder
elsedirectivelist: ".ELSE"i _linereminder insegdir+
elseifblock: elseifstatement _linereminder insegdir+ elseifblock?
elseifstatement: "ELSEIF"i expr| "ELSEIFE"i expr| "ELSEIFB"i textitem| "ELSEIFNB"i textitem | "ELSEIFDEF"i LABEL| "ELSEIFNDEF"i LABEL| "ELSEIFDIF"i textitem _COMMA textitem| "ELSEIFDIFI"i textitem _COMMA textitem| "ELSEIFIDN"i textitem _COMMA textitem| "ELSEIFIDNI"i textitem _COMMA textitem| "ELSEIF1"i | "ELSEIF2"i
enddir: "END"i expr?  _linereminder?
endpdir: LABEL "ENDP"i _linereminder
endsdir: LABEL "ENDS"i _linereminder
eqconstexpr: "=" expr
equdir: LABEL "EQU"i equtype _linereminder
?equtype: expr| textliteral
errordir: erroropt _linereminder
erroropt: ".ERR"i textitem? | ".ERRE"i expr opttext? | ".ERRNZ"i expr opttext? | ".ERRB"i textitem opttext? | ".ERRNB"i textitem opttext? | ".ERRDEF"i LABEL  opttext? | ".ERRNDEF"i LABEL opttext? | ".ERRDIF"i textitem _COMMA textitem  opttext? | ".ERRDIFI"i textitem _COMMA textitem  opttext? | ".ERRIDN"i textitem _COMMA textitem  opttext? | ".ERRIDNI"i textitem _COMMA textitem  opttext? | ".ERR1"i textitem? | ".ERR2"i textitem?
exitdir: ".EXIT"i expr?  _linereminder
exitmdir: "EXITM"i textitem? _linereminder
externdef: langtype?  LABEL altidq? ":" externtype
externdir: externkey externlist _linereminder
externkey: "EXTRN"i | "EXTERN"i | "EXTERNDEF"i
externlist: externdef | externdef commaoeol externlist
externtype: "ABS"i | qualifiedtype
fieldinit: initvalue? | structinstance
fieldinitlist: fieldinit (commaoeol fieldinit)*
filespec: charlist| textliteral
flagname: "ZERO?"i | "CARRY?"i | "OVERFLOW?"i | "SIGN?"i | "PARITY?"i
floatnumber : SIGNED_FLOAT | digits "R"| digits "r"
forcdir: "FORC"i | "IRPC"i
fordir: "FOR"i | "IRP"i
forparm: LABEL dotdotforparmtype?
forparmtype: "REQ"i | "=" textliteral
?frameexpr: "SEG"i LABEL | "DGROUP"i ":" LABEL| segmentregister ":" LABEL| LABEL
_generaldir: modeldir | segorderdir | namedir| includelibdir | commentdir| groupdir | assumedir| structdir | typedefdir| externdir | publicdir | commdir | prototypedir| equdir | assdir | textdir| contextdir | optiondir | processordir| radixdir | titledir | pagedir | listdir | crefdir | echodir| ifdir | errordir | includedir | macrodir | macrocall | macrorepeat | purgedir| macrowhile | macrofor | macroforc| aliasdir | recorddir | smartdir
groupdir : LABEL "GROUP"i segidlist
idlist: LABEL | LABEL _COMMA idlist
ifcexpr: ".IF"i cexpr
ifdir: ifstatement _linereminder insegdir+ elseifblock? elsedirectivelist? "ENDIF"i _linereminder
ifstatement: "IF"i expr| "IFE"i expr| "IFB"i textitem| "IFNB"i textitem| "IFDEF"i LABEL| "IFNDEF"i LABEL| "IFDIF"i textitem _COMMA textitem| "IFDIFI"i textitem _COMMA textitem| "IFIDN"i textitem _COMMA textitem| "IFIDNI"i textitem _COMMA textitem| "IF1"i | "IF2"i
includedir: "INCLUDE"i filespec _linereminder
includelibdir: "INCLUDELIB"i filespec _linereminder
?insegdir: labeldef _insegmentdir | _insegmentdir
insegdirlist: insegdir+
_insegmentdir: instruction| datadir| controldir| startupdir| exitdir| offsetdir| labeldir| procdir  localdirlist? endpdir| procdir  localdirlist? insegdir+ endpdir| invokedir| _generaldir | _linereminder

_asminstruction: instrprefix? mnemonic  exprlist?
//| PUSH allreglist
//| POP allreglist

instruction: _asminstruction _linereminder

invokearg: _anyregister "::" register| "ADDR"i expr | expr
invokedir: "INVOKE"i expr commainvokelist? _linereminder
invokelist: invokearg | invokearg commaoeol invokelist
labeldef: LABEL ":" | LABEL "::"
labeldir: LABEL "LABEL"i qualifiedtype _linereminder
_linereminder: _ENDOFLINE | comment _ENDOFLINE
listdir: listoption _linereminder
localdef: "LOCAL"i idlist _linereminder
localdir: "LOCAL"i parmlist _linereminder
localdirlist: localdir+
locallist: localdef+
macroarg: "%" expr| "%" LABEL "(" macroarglist ")" | "<" arbitrarytext ">" | arbitrarytext | STRING
macroarglist: macroarg | macroarg _COMMA macroarglist
macrobody: locallist? macrostmtlist
macrocall: MACRONAME  "(" macroarglist ")" | MACRONAME macroarglist? _linereminder
macrodirhead: LABEL "MACRO"i macroparmlist?
macrodir: macrodirhead _linereminder macrobody "ENDM"i _linereminder
macrofor: fordir forparm  _COMMA "<" macroarglist ">" _linereminder macrobody "ENDM"i _linereminder
macroforc: forcdir LABEL  _COMMA textliteral _linereminder macrobody "ENDM"i _linereminder
macronamelist: LABEL | LABEL _COMMA macronamelist
macroparm: LABEL dotdotparmtype?
macroparmlist: macroparm | macroparm commaoeol macroparmlist
macrorepeat: repeatbegin _linereminder macrobody "ENDM"i _linereminder
repeatbegin: repeatdir expr
macrostmt: instruction | labeldef | _directive| exitmdir| ":" LABEL _linereminder| "GOTO"i LABEL _linereminder
macrostmtlist: macrostmt+
macrowhile: "WHILE"i expr _linereminder macrobody "ENDM"i _linereminder

modeldir: ".MODEL"i memoption commamodeloptlist? _linereminder
modelopt: langtype| stackoption | "OS_DOS"i
modeloptlist: modelopt | modelopt _COMMA modeloptlist
namedir: "NAME"i LABEL _linereminder
NEARFAR: "NEAR"i | "FAR"i
nestedstruct: STRUCTHDR  LABEL?  _linereminder "ENDS"i _linereminder | STRUCTHDR  LABEL?  _linereminder structitem+ "ENDS"i _linereminder
offsetdir: offsetdirtype _linereminder
offsetdirtype: "EVEN"i | "ORG"i expr| "ALIGN"i expr?
offsettype: "GROUP"i | "SEGMENT"i | "FLAT"i
optiondir: "OPTION"i optionlist _linereminder
optionitem: "CASEMAP"i ":" maptype| "DOTNAME"i | "NODOTNAME"i | "EMULATOR"i | "NOEMULATOR"i | "EPILOGUE"i ":" LABEL| "EXPR16"i | "EXPR32"i | "LANGUAGE"i ":" langtype| "LJMP"i | "NOLJMP"i | "M510"i | "NOM510"i | "NOSIGNEXTEND"i | "OFFSET"i ":" offsettype| "OLDMACROS"i | "NOOLDMACROS"i | "OLDSTRUCTS"i | "NOOLDSTRUCTS"i | "PROC"i ":" ovisibility| "PROLOGUE"i ":" LABEL| "READONLY"i | "NOREADONLY"i | "SCOPED"i | "NOSCOPED"i | "SEGMENT"i ":" segsize| "SETIF2"i ":" bool
optionlist: optionitem | optionitem commaoeol optionlist
opttext: _COMMA textitem
ovisibility: "PUBLIC"i | "PRIVATE"i | "EXPORT"i
pagedir: "PAGE"i pageexpr? _linereminder
pageexpr: "+"|  expr commapagewidth? | commapagewidth
parm: LABEL  expr? dotdotqualifiedtype?
parmlist: parm | parm commaoeol parmlist
parmtype: "REQ"i | "=" textliteral| "VARARG"i
poptions: distance?  langtype?  ovisibility?
procdir: LABEL "PROC"i poptions  brmacroarglist?  usesregs? procparmlist? commaparmidvararg? _linereminder
processordir: processor _linereminder | coprocessor _linereminder
procparmlist: commaparmlist
protoarg : LABEL? ":" qualifiedtype
protoarglist: commaprotolist
protolist: protoarg | protoarg commaoeol protolist
protospec: LABEL | distance?   langtype? protoarglist? commaidvararg?
prototypedir: LABEL "PROTO"i protospec
pubdef: langtype?  LABEL
publicdir: "PUBLIC"i publist _linereminder
publist: pubdef | pubdef commaoeol publist
purgedir: "PURGE"i macronamelist
qualifiedtype: distance? "PTR"i qualifiedtype? | type
qualifier: "PROTO"i protospec | qualifiedtype
//QUOTE: "'"" | "\""
radixdir: ".RADIX"i expr _linereminder
//readonly: READONLY
//oldrecordfieldlist: exprlist
recordconst_: "{" exprlist "}"| oldrecordinstance
oldrecordinstance: "<" exprlist ">"
recordconst: LABEL recordconst_
recorddir: LABEL "RECORD"i bitdeflist _linereminder
recordinstance_: "{"  _linereminder? exprlist _linereminder?  "}"
recordinstance: recordinstance_ | oldrecordinstance | expr "DUP"i "(" recordinstance ")"
recordinstlist: recordinstance | recordinstance commaoeol recordinstlist
_anyregister: segmentregister | register | specialregister
//reglist: register+
allreglist: _anyregister+

repeatblock: ".REPEAT"i _linereminder blockstatements untildir
repeatdir: "REPEAT"i | "REPT"i
//?exprlist: exprlist
//exprlist: expr | expr commaoeol exprlist
//?exprlist: exprlist -> exprlist
exprlist: (initvalue|dupdir) (_COMMA _ENDOFLINE? (initvalue|dupdir))*
dupdir: expr "DUP"i "(" exprlist ")"
ANYTHING: "?"
initvalue: ANYTHING | floatnumber | expr -> expr

commaoeol: _COMMA  _linereminder?
!segattrib: "PUBLIC"i | "STACK"i | "COMMON"i | "MEMORY"i | "AT"i expr| "PRIVATE"i
segdir: ".CODE"i LABEL? | ".DATA"i | ".DATA_"i| ".CONST"i | ".FARDATA"i LABEL? | ".FARDATA_"i LABEL? | ".STACK"i expr?
segidlist : LABEL  _COMMA segidlist | LABEL
_segmentdef: segmentdir  insegdir+  endsdir| simplesegdir | simplesegdir  insegdir+   endsdir?
segmentdir: LABEL "SEGMENT"i segoptionlist?  _linereminder
_segoption: segalign| segro| segattrib| segsize| classname
segoptionlist: _segoption+
segro: "READONLY"i
!segsize : "USE16"i | "USE32"i | "FLAT"i
simplesegdir: segdir _linereminder
stackoption: "NEARSTACK"i | "FARSTACK"i
startupdir: ".STARTUP"i _linereminder
structdirhdr: LABEL STRUCTHDR expr?  commanonuniq?
STRUCTHDR: "STRUC"i | "STRUCT"i | "UNION"i
structdir: structdirhdr _linereminder endsdir | structdirhdr _linereminder structitem+ endsdir
structbody: structitem+
structinstance: "<"  fieldinitlist?  ">"| "{" _linereminder?   fieldinitlist?   _linereminder?  "}"| structdup
structdup: expr "DUP"i "(" structinstlist ")"
structinstlist: structinstance (commaoeol structinstance)*
structitem: datadir| _generaldir| offsetdir| nestedstruct| _linereminder
textdir: LABEL textmacrodir _linereminder
textitem: textliteral| "%" expr //| LABEL
textlist: textitem | textitem commaoeol textlist
textliteral: "<" text ">" _linereminder
textmacrodir: "CATSTR"i textlist? | "TEXTEQU"i textlist? | "SIZESTR"i textitem| "SUBSTR"i textitem  _COMMA expr commatextlen| "INSTR"i textstartcomma? textitem  _COMMA textitem
textstartcomma: expr  _COMMA
titledir: titletype arbitrarytext _linereminder
titletype: "TITLE"i | "SUBTITLE"i | "SUBTTL"i
?type: LABEL| distance| datadecl
typedefdir: LABEL "TYPEDEF"i qualifier
untildir: ".UNTIL"i cexpr _linereminder | ".UNTILCXZ"i cxzexpr?  _linereminder
usesregs: "USES"i allreglist
whileblock: ".WHILE"i cexpr _linereminder blockstatements ".ENDW"i
//WHITESPACECHARACTER: WS
smartdir: "SMART"i | "NOSMART"i
//%import common.SIGNED_FLOAT
